<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ball's fighting</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif&family=Press+Start+2P&display=swap" rel="stylesheet">   
    <link rel="stylesheet" type="text/css" href="/css/main.css">
</head>
<body style="background-color:">
    <div id="game_rooms_switcher">
        <div id="choose_pseudo">
            <h1>Ball's fighting</h1>
            <p>Le jeu de baston qui rend maboule !</p>
            <label>Rentre un pseudo et rentre dans ton adversaire !<br/>
            <input type="text" name="_pseudo" minlength=3 maxlength=12  id="_pseudo"/></label>
            <button class="cta choose_pseudo_submit">Rejoindre</button>
        </div>
        <div id="rooms_list">
            <h1>Liste des games</h1>
            <button class="cta" id="refresh">Refresh</button>
            <div class="list_room">
                <%Object.entries(rooms).forEach(function(room){%>
                    <%if( room["players"] && room["players"].length != 0){%>
                        <div class="room">
                            <div>
                                <h2><%=room[0]%></h2>
                            </div>
                            <div>
                                <button class="cta join_room" data-name="<%=room[0]%>">Join</button>
                            </div>   
                        </div>
                    <%}%>
                <%})%>
            </div>
            <div id="create_room_form">
                <input type="text" name="room_name" id="room_name_input" minlength=3 maxlength=20 placeholder="nom de la room"/>
                <br/><button class="cta" id="submit_new_room">Cr√©er une room</button>
            </div>
        </div>
        <div id="game">
            <div id="game_zone">
                <canvas id="canvas_game" width="1080" height="760" style="background-color:#080808;border:1px solid #ebebeb;"></canvas>
                <div>
                    <span class="room_name"></span>
                    <div class="active_players">
                        <p>
                            <span class="player"></span> VS <span class="player"></span>
                        </p> 
                    </div>
                    
                    <div id="players_connected">
                        <div>
                            <h2>futurs ball'z</h2>
                        </div>
                    </div>

                    <div id="game_chat">
                        <div>
                        </div>
                    </div>

                    <button id="quit_room" class="cta">S'en aller comme un pleutre</button>
                    <div id="counter"></div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script src="/js/player.js"></script>
    <script src="/js/weapons.js"></script>
    <script src="/js/connexion.js"></script>
    <script>
        //LEAVE ROOM
        $("#quit_room").click(function(e){
            $("#game").hide()
            $("#rooms_list").show()
            socket.emit("delete_player_from_room", pseudo)
            Players = []
            //location.href="/"
            $("#players_connected").find("."+pseudo).remove()
        })
        
        //canvas
        var canvas_game_dom = $("#canvas_game")
        var game_dim = {width: parseInt(canvas_game_dom.attr("width")), height: parseInt(canvas_game_dom.attr("height"))}
        var ctx = canvas_game_dom[0].getContext("2d")
        var game_state = "play"
        var keys = {}
        var room_name = ""
        var pseudo = ""
        var socket = {}
        var new_round_timer = 2
        var new_round_timer_launched = false
        var kills = {}
        $(document).keydown(function(e){
            keys[e.keyCode] = true
        }).keyup(function(e){
            delete keys[e.keyCode]
        })
        var mouse_coords = {}
        $(canvas_game_dom).mousemove(function(e){
            mouse_coords.x = e.clientX
            mouse_coords.y = e.clientY
        })
        $("#game, #rooms_list").hide()

        function animate(){
            requestAnimationFrame(animate)
            ctx.clearRect(0,0,game_dim.width, game_dim.height)
            var active_players = []
           
            if (Players[0]){
                Players[0].color = "yellow"
                active_players.push(Players[0])
            }
            
            if (Players[1]){
                active_players.push(Players[1])
                Players[1].color = "purple"
            }

           
            if (game_state=="play"){

                active_players.forEach(function(player, index){
                
                    player.update()
                    
                    $(".active_players .player").eq(index).html(player.name)
                })
                Bullets.forEach(function(bullet){
                    bullet.update()
                })
                CircleBullets.forEach(function(circle_bullet){
                    circle_bullet.update()
                })
                //left
                if (keys[81]){
                    if (Player.find(pseudo).x-Player.find(pseudo).speed > 0){
                        Player.find(pseudo).x-=  Player.find(pseudo).speed
                    }
                }
                //up
                if (keys[90]){
                    if (Player.find(pseudo).y-Player.find(pseudo).speed > 0){
                        Player.find(pseudo).y-=Player.find(pseudo).speed
                    }
                }
                //right
                if (keys[68]){
                    if (Player.find(pseudo).x+Player.find(pseudo).speed < game_dim.width){
                        Player.find(pseudo).x+= Player.find(pseudo).speed
                    }
                }
                //down
                if (keys[83]){
                    if (Player.find(pseudo).y+Player.find(pseudo).speed < game_dim.height){
                        Player.find(pseudo).y+=Player.find(pseudo).speed
                    }
                }
                //space
                if (Players.length >=  2 && keys[32]){
                    if (can_shoot_bullet && (Player.find(pseudo)==Players[0] || Player.find(pseudo)==Players[1])){
                        bullet = new Bullet(Player.find(pseudo).x,Player.find(pseudo).y, mouse_coords.x, mouse_coords.y, pseudo)
                        socket.emit("shoot", {x:Player.find(pseudo).x, y:Player.find(pseudo).y, dest_x:mouse_coords.x, dest_y:mouse_coords.y, pseudo:pseudo})
                        can_shoot_bullet = false
                        setTimeout(function(){can_shoot_bullet=true}, bullet.reload_time)
                    }
                }
                //alt
                if (Players.length >=  2 && keys[69]){
                    if (can_shot_circle_bullet && (Player.find(pseudo)==Players[0] || Player.find(pseudo)==Players[1])){
                        circle_bullet = new CircleBullet(Player.find(pseudo).x,Player.find(pseudo).y, mouse_coords.x, mouse_coords.y, pseudo)
                        socket.emit("circle_shot", {x:Player.find(pseudo).x, y:Player.find(pseudo).y, dest_x:mouse_coords.x, dest_y:mouse_coords.y, pseudo:pseudo})
                        can_shot_circle_bullet = false
                        setTimeout(function(){can_shot_circle_bullet=true}, circle_bullet.reload_time)
                    }
                }
                
                socket.emit("player_pos", {pseudo:pseudo,x:Player.find(pseudo).x,y:Player.find(pseudo).y})
            }else if (game_state=="new_round") {
               
                active_players.forEach(function(_player, index){                    
                    $(".active_players .player").eq(index).html(player.name)
                })
                ctx.font="50px Noto serif"
                ctx.fillStyle = "white"
                
                ctx.fillText(new_round_timer,game_dim.width/2, game_dim.height/2)
                if (!new_round_timer_launched) {
                    new_round_timer_launched = true
                    launch_new_round_timer()
                }
            }
        }
        function launch_new_round_timer(){
            if (new_round_timer > 0){
                setTimeout(function(){
                    new_round_timer -=1
                    launch_new_round_timer()
                },1000)
            } else {
                game_state = "play"
                new_round_timer = 2
                new_round_timer_launched = false
            }
           
        }
        
        //if the user is in a room
        function initialize(){
            $("#game").show();
            $("#rooms_list").hide();
           
            $(".room_name").html("room name: " + room_name)
            //NEW CONNECTION
            socket = io.connect(location +"?room_name=" +room_name)

            socket.emit("add_player", {pseudo: pseudo})

            //get all players for a new connected
            socket.on("add_players_new_connected", function(players){
                $("#players_connected").html("<div><h2>Futurs ball'z</h2></div>")
                players.forEach(function(_player){
                    player = new Player(Players.length*200+100, 200, _player[0])
                    //$("#players_connected").append("<p class="+_player[0]+">"+_player[0]+"</p>")
                    $("#players_connected").append("<div>"+_player[0]+ "-"+ kills[_player].name||""+"</div>")
                    $("#game_chat").append("<p>"+_player[0]+" entre dans la bataille ! Courage a lui...</p>")
                })
                animate()  
            })
            //get the new player who is connected, add the player for the new connected
            socket.on("add_player", function(_pseudo){
                if (_pseudo != pseudo){
                    player = new Player(Players.length*200+100, 200, _pseudo)
                    $("#players_connected").append("<div>"+_pseudo+ "-"+ kills[_player].name||""+"</div>")
                    $("#game_chat").append("<p>"+_pseudo+" entre dans la bataille ! Courage a lui...</p>")
                }
            })
            //remove a player
            socket.on("remove_player", function(_pseudo){
                Players.forEach(function(player, index){
                    if (player.name==_pseudo){
                        Players.splice(index,1)
                        $("#game_chat").append("<p>"+_pseudo+" s'est en all√© la queue entre les jambes...</p>")
                    }
                })
            })
            socket.on("player_disconnect", function(_pseudo){
                Players.forEach(function(player, index){
                    if (player.name==_pseudo){
                        Players.splice(index,1)
                        $("#game_chat").append("<p>"+_pseudo+" s'est en all√© la queue entre les jambes...</p>")
                    }
                })
            })
            socket.on("player_pos", function(data){
                p = Player.find(data.pseudo)
                p.x=data.x
                p.y = data.y
            })
            socket.on("shoot", function(data){
                bullet = new Bullet(data.x, data.y, data.dest_x, data.dest_y, data.pseudo)
            })
            socket.on("circle_shot", function(data){
                circle_bullet = new CircleBullet(data.x, data.y, data.dest_x, data.dest_y, data.pseudo)
            })
        }


        function getKeyByValue(object, value) {
            return Object.keys(object).find(key => object[key] === value);
            }
    </script>
</body>
</html>